{"frames":[{"func":"data_longer_3 %>% pivot_longer(cols = -c(individual, treatment_group, \n    species_num, species, measure_instance, measure_date, alive_date, \n    alive_status, mass_instance, mass), names_to = \"length_instance\", \n    values_to = \"length\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"pivot_longer(., cols = -c(individual, treatment_group, species_num, \n    species, measure_instance, measure_date, alive_date, alive_status, \n    mass_instance, mass), names_to = \"length_instance\", values_to = \"length\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"pivot_longer.data.frame(., cols = -c(individual, treatment_group, \n    species_num, species, measure_instance, measure_date, alive_date, \n    alive_status, mass_instance, mass), names_to = \"length_instance\", \n    values_to = \"length\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"pivot_longer_spec(data, spec, names_repair = names_repair, values_drop_na = values_drop_na, \n    values_ptypes = values_ptypes, values_transform = values_transform)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"vec_ptype_common(!!!set_names(val_cols[col_id], cols), .ptype = values_ptypes[[value]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function () \nvec_default_ptype2(x = x, y = y, x_arg = x_arg, y_arg = y_arg, \n    `vctrs:::from_dispatch` = `vctrs:::from_dispatch`, `vctrs:::df_fallback` = `vctrs:::df_fallback`, \n    `vctrs:::s3_fallback` = `vctrs:::s3_fallback`))()","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"vec_default_ptype2(x = x, y = y, x_arg = x_arg, y_arg = y_arg, \n    `vctrs:::from_dispatch` = `vctrs:::from_dispatch`, `vctrs:::df_fallback` = `vctrs:::df_fallback`, \n    `vctrs:::s3_fallback` = `vctrs:::s3_fallback`)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop_incompatible_type(x, y, x_arg = x_arg, y_arg = y_arg, `vctrs:::from_dispatch` = match_from_dispatch(...))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop_incompatible(x, y, x_arg = x_arg, y_arg = y_arg, details = details, \n    ..., message = message, class = c(class, \"vctrs_error_incompatible_type\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop_vctrs(message, class = c(class, \"vctrs_error_incompatible\"), \n    x = x, y = y, details = details, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(message, class = c(class, \"vctrs_error\"), ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error: Can't combine `length_1` <character> and `stage` <double>.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n"}